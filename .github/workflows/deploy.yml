name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

# permissions:
#   contents: read
#   security-events: write  # Required for CodeQL to upload results
#   pull-requests: write
#   repository-projects: write

jobs:
  # print-token:
  #   permissions: write-all
  #   name: print-token
  #   # environment: dev
  #   # # needs: pre-pkr
  #   # runs-on: ubuntu-latest
  # security_scan:
  #   name: Security Scan
  #   # permissions: write-all
  #   # name: print-token
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # - name: Get registration token
  #     # id: getRegToken
  #     # run: |
  #     #   curl -X POST -H \"Accept: application/vnd.github.v3+json\"  -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/myprofile/myrepo/actions/runners/registration-token

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: python

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3

  #     - name: Scan with Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: "fs"  # Scan repository files
  #         format: "table"
  #         exit-code: "1"
  #         severity: "CRITICAL,HIGH"

  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    # needs: security_scan  # Ensure security scan passes before Terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  deploy:
    # name: Deploy to EC2
    runs-on: ubuntu-latest
    # needs: security_scan  # Ensure security scan passes before deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy application
        run: |
          ssh ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd ~/pipeline
            git pull origin main
            docker-compose down
            docker-compose up --build -d
          EOF
